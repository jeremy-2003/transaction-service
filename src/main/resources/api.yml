openapi: 3.0.3
info:
  title: Transaction Service API
  description: API for managing transactions including creation, retrieval, and filtering by various criteria
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/transactions
components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: string
        customerId:
          type: string
        productId:
          type: string
        productCategory:
          type: string
          enum: [ACCOUNT, CREDIT, CREDIT_CARD]
        productSubType:
          type: string
          enum: [SAVINGS, CHECKING, FIXED_TERM, PERSONAL_CREDIT, BUSINESS_CREDIT, PERSONAL_CREDIT_CARD, BUSINESS_CREDIT_CARD]
        transactionType:
          type: string
          enum: [DEPOSIT, WITHDRAWAL, TRANSFER, CREDIT_PAYMENT, CREDIT_CARD_PURCHASE]
        amount:
          type: number
          format: double
        transactionDate:
          type: string
          format: date-time
        destinationAccountId:
          type: string
          description: Required only for transfer transactions
        commissions:
          type: number
          format: double
    BaseResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
        data:
          oneOf:
            - $ref: '#/components/schemas/Transaction'
            - type: array
              items:
                $ref: '#/components/schemas/Transaction'
paths:
  /:
    post:
      summary: Create a new transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /customer/{customerId}:
    get:
      summary: Get transactions by customer ID
      operationId: getTransactionsByCustomerId
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '204':
          description: No transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /product/{productId}:
    get:
      summary: Get transactions by product ID
      operationId: getTransactionsByProductId
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '204':
          description: No transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /{transactionId}:
    get:
      summary: Get transaction by ID
      operationId: getTransactionById
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /customer/{customerId}/product/{productId}:
    get:
      summary: Get transactions by customer ID and product ID
      operationId: getTransactionsByCustomerIdAndProductId
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '204':
          description: No transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /by-date:
    get:
      summary: Get transactions by date range
      operationId: getTransactionsByDate
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '204':
          description: No transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'